package dynamic;

/**
 * Find a number of ways to make a specific amount
 *
 * ---------------------------------
 *    n          Ways         F(n)        F(n) = Number of ways
 * ---------------------------------
 *    1           1            1
 * ---------------------------------
 *    2           2            2
 *                1+1
 * ---------------------------------
 *    3           3            3
 *                2+1
 *                1+1+1
 * ---------------------------------
 *    4           4            5
 *                3+1
 *                2+2
 *                2+1+1     -----------> {2+1+1, Not consider the order
 *                1+1+1+1+1               1+2+1,
 * ---------------------------------      1+1+2}
 *
 *
 * Time  Complexity: O(n * the number of coins)
 * Space Complexity: O(n)
 *
 * We need 0 for the edge condition
 *
 * T[i - coins[i]]: ways with the new coin
 * T[i]: ways without the new coin
 *
 * e.g. coins[3, 6] For 12
 * T[6]:  with the new coin    {6, 3+3}  (+ 6)
 * T[12]: without the new coin {3+3+3+3}
 *
 *
 * Coins{2, 3, 5, 6}         T[] (Target: n=10) ------>
 *          --------------------------------------------------------------------------------------------------------------------------
 * Coins    |     0    |     1    |     2    |     3    |     4    |     5    |     6    |     7    |     8    |     9    |    10    |
 *          --------------------------------------------------------------------------------------------------------------------------
 * Coin: 0  |    *1    |     0    |     0    |     0    |     0    |     0    |     0    |     0    |     0    |     0    |     0    |
 *          --------------------------------------------------------------------------------------------------------------------------
 * Coin: 2  |     1    |     0    |  1+0 = 1 |     0    |  1+0 = 1 |     0    |  1+0 = 1 |     0    |  1+0 = 1 |     0    |  1+0 = 1 | from 2 ~ 10
 *          |          |          | T[0]+T[2]|          | T[2]+T[4]|          | T[4]+T[6]|          | T[0]+T[2]|          | T[0]+T[2]|
 *          --------------------------------------------------------------------------------------------------------------------------
 * Coin: 3  |     1    |     0    |     1    |  1+0 = 1 |     1    |  1+0 = 1 |  1+1 = 2 |  1+1 = 2 |  1+1 = 2 |  2+0 = 2 |  2+1 = 3 | from 3 ~ 10
 *          |          |          |          | T[0]+T[3]|          | T[2]+T[5]| T[3]+T[6]| T[4]+T[7]| T[5]+T[8]| T[6]+T[9]|T[7]+T[10]|
 *          --------------------------------------------------------------------------------------------------------------------------
 *  ......   T[total - coin] + T[total]
 *
 *
 */
public class CoinChange {
    public static int solve(int target, int[] coins){
        int[] T = new int[target + 1];
        T[0] = 1; // important!!
        for (int coin : coins) {
            for (int i = coin; i < T.length; i++) { // start from coin
                T[i] += T[i - coin]; // T[i-coin] without the coin, T[i] with the coin
            }
        }
        return T[target];
    }
}
